Rebase
------

Reorganiza y aplica los cambios de una rama sobre otra rama. No hace fusión de ramas, sino que inserta
los commits de una rama en la parte superior de la otra, generando un nuevo commit con todo el historial
de la rama destino + los que tenía en la rama origen.

> git rebase <branch>

Ejemplo: Me posiciono en la rama que le faltan los cambios y lanzo el comando.
Desarrollo tiene cambios que queremos rebasar en Master. Me posiciono en Master y lanzo
git rebase desarrollo

Pasos del comando Rebase
------------------------

1) Determina que commits necesitan ser reorganizados
2) Guarda puntos de referencia (refs) en una carpeta temporal
3) Aplica commits de la rama de origen a la rama de destino
4) Resolucion de conflictos
5) Creación de los nuevos commits
6) Avanza la referencia de la rama destino al último commit
7) Elimina los puntos de referencia temporales (refs)
8) Finaliza el proceso de Rebase.

Beneficios de usar Merge
------------------------

- Podemos conservar una representación más precisa de la unificación de las ramas en la línea de
tiempo
- Al trabajar con otros desarrolladores, merge es menos propenso a causar confusiones al conservar
la historia de commits

Beneficios de usar Rebase
-------------------------

- Podemos mantener una historia de commits lineal y menos fragmentada
- Nos da una historia de commits mas limpia
--------------------------------------------------------------

Cherry-pick
-----------

1) Necesitamos el HASH del commit (git log --oneline)
2) Posicionamos en la rama donde queremos aplicar el cambios
3) Lanzar el comando

> git cherry-pick <hash>

Con este comando puedo llevar a la rama donde esté trabajando, un commit antiguo de otra rama.
---------------------------------------------------

Stash
-----

Este comando nos sirve para cambiar de rama sin necesidad de hacer un commit. Guarda los cambios en
una pila temporal mediante el comando

> git stash

Una vez hecho el stash ya podemos cambiar de rama.
Para recuperar el ultimo stash

> git stash apply

Para ver que tenemos el stash

> git stash list

Para recuperar stash mas antiguos

> git stash apply --index #indice
-------------------------------------------------------------------

Bisect
------

Bisect nos ayuda a automatizar el proceso de búsqueda de bugs o problemas funcionales en caso
de venir arrastrando errores de antiguos commits sin habernos dado cuenta.

1) Iniciar el modo Bisect
> git bisect start

2) Definir 1 commit bueno y 1 commit malo
> git bisect good <hash>
> git bisect bad <hash>

